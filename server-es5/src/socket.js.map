{"version":3,"sources":["../../server/src/socket.js"],"names":[],"mappings":";;;;;;AAMA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAI,SAAS,eAAK,MAAL,uBAAb;AACA,IAAI,KAAK,sBAAO,MAAP,CAAT;;AAEA,GAAG,EAAH,CAAM,YAAN,EAAoB,kBAAU;;;AAG5B,MAAI,eAAe,2BAAU,KAAV,CAAgB,OAAO,MAAP,CAAc,OAAd,CAAsB,OAAtB,CAA8B,YAA9B,CAAhB,CAAnB;;AAEA,MAAI,aAAa,SAAjB,EAA4B;AAC1B,qBAAO,SAAP;AACA,sBAAQ,UAAR,CAAmB,MAAnB,EAA2B,QAAQ,GAAR,CAAY,IAAvC;AACD;;;;AAID,SAAO,EAAP,CAAU,MAAV,EAAkB;AAAA,WAAM,kBAAQ,MAAR,CAAe,EAAf,EAAmB,MAAnB,CAAN;AAAA,GAAlB;;;AAGA,SAAO,EAAP,CAAU,YAAV,EAAwB,UAAC,QAAD;AAAA,WAAc,iBAAO,cAAP,CAAsB,EAAtB,EAA0B,MAA1B,EAAkC,QAAlC,CAAd;AAAA,GAAxB;;;;;AAKA,SAAO,EAAP,CAAU,YAAV,EAAwB;AAAA,WAAS,iBAAO,UAAP,CAAkB,EAAlB,EAAsB,MAAtB,CAAT;AAAA,GAAxB;;;;AAIA,SAAO,EAAP,CAAU,WAAV,EAAuB;AAAA,WAAQ,kBAAQ,SAAR,CAAkB,EAAlB,EAAsB,MAAtB,CAAR;AAAA,GAAvB;;AAEA,SAAO,EAAP,CAAU,QAAV,EAAoB,kBAAU;AAC5B,OAAG,IAAH,CAAQ,eAAR,EAAyB,iBAAO,KAAP,CAAa,MAAb,CAAzB;AACA,qBAAO,SAAP;AACD,GAHD;;;AAMA,SAAO,EAAP,CAAU,SAAV,EAAqB,YAAM;AACzB,qBAAO,SAAP;AACD,GAFD;;;AAKA,SAAO,EAAP,CAAU,OAAV,EAAmB,eAAO;AACxB,YAAQ,GAAR,CAAY,GAAZ;;AAED,GAHD;;;AAMA,SAAO,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5B,OAAG,IAAH,CAAQ,WAAR,EAAqB,OAAO,MAAP,CAAc,EAAnC;AACA,WAAO,iBAAO,KAAP,CAAa,OAAO,MAAP,CAAc,EAA3B,CAAP;AACD,GAHD;AAKD,CAhDD;;AAkDA,OAAO,OAAP,GAAiB,MAAjB","file":"socket.js","sourcesContent":["/**\n * @file\n * @author Alejandro Rivera <seeealejandro@gmail.com>\n * {@link https://github.com/alejandro-rivera-y/beta-ball GitHub}\n */\n\n\"use strict\";\n\nimport http from 'http'\nimport application from './http-request'\nimport socket from 'socket.io'\nimport userAgent from 'express-useragent'\nimport desktop from './desktop'\nimport mobile from './mobile'\nlet server = http.Server(application);\nlet io = socket(server);\n\nio.on('connection', socket => {\n\n  // Detectando el tipo de usuario conectado\n  let clientDevice = userAgent.parse(socket.client.request.headers['user-agent']);\n\n  if (clientDevice.isDesktop) {\n    mobile.flushData();\n    desktop.sendingUrl(socket, process.env.HOST);\n  }\n\n  // El usuario que ingreso a una nueva sala, emite un evento que se encarga de notificar al navegador\n  // enviando el id asignado por socket.io\n  socket.on('join', () => desktop.joined(io, socket));\n\n  // Cada vez que un usuario configura los valores de su sesion se informa al navegador\n  socket.on('newOptions', (betaBall) => mobile.newUserOptions(io, socket, betaBall));\n\n  // Cuando el usuario esta listo emite un evento, donde se verifica si todos los usuarios estan listo\n  // si todos los usuarios estan listos se emite un evento que renderiza el canvas, de lo contrario\n  // se le indica al jugador que todos deben estar listo\n  socket.on('user ready', ready => mobile.usersReady(io, socket));\n\n  // Cuando el usuario mueve adecuadamente el dispositivo, este evento se le notifica al navegador para que\n  // genere el efecto visual\n  socket.on('user move', user => desktop.userMoved(io, socket));\n\n  socket.on('winner', winner => {\n    io.emit('screen winner', mobile.users[winner])\n    mobile.flushData()\n  });\n\n  // Se limpia toda la informaciÃ³n del servidor\n  socket.on('restart', () => {\n    mobile.flushData()\n  });\n\n  // En caso de que un error suceda se controla el evento, que debe ser mostrado en el desktop\n  socket.on('error', err => {\n    console.log(err);\n    //socket.emit('display error')\n  });\n\n  // Cuando se desconecta un usuario se eliminan los datos asociados\n  socket.on('disconnect', () => {\n    io.emit('user left', socket.client.id);\n    delete mobile.users[socket.client.id]\n  });\n\n});\n\nmodule.exports = server;"]}